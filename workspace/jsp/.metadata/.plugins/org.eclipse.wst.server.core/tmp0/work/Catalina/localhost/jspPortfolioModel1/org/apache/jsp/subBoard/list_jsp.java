/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2022-09-13 07:06:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.subBoard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import config.Pagenation;
import subBoard.model.dto.SubBoardChkDTO;
import subBoard.model.dao.SubBoardChkDAO;
import subBoard.model.dao.SubBoardDAO;
import subBoard.model.dto.SubBoardDTO;
import java.util.ArrayList;
import java.net.Inet4Address;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/subBoard/../_include/inc_sessionChk.jsp", Long.valueOf(1661482669264L));
    _jspx_dependants.put("/subBoard/_inc_top.jsp", Long.valueOf(1663052765641L));
    _jspx_dependants.put("/subBoard/../_include/inc_header.jsp", Long.valueOf(1662616070258L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("subBoard.model.dto.SubBoardDTO");
    _jspx_imports_classes.add("config.Pagenation");
    _jspx_imports_classes.add("subBoard.model.dto.SubBoardChkDTO");
    _jspx_imports_classes.add("subBoard.model.dao.SubBoardChkDAO");
    _jspx_imports_classes.add("subBoard.model.dao.SubBoardDAO");
    _jspx_imports_classes.add("java.net.Inet4Address");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");

	String referer = request.getHeader("REFERER");
	String url = request.getRequestURL().toString();
	String uri = request.getRequestURI().toString();
	String path = request.getContextPath();
	String ip = Inet4Address.getLocalHost().getHostAddress();	// import java.net.Inet4Address;
/*	
	out.println("referer : " + referer + "<br>");
	out.println("url : " + url + "<br>");
	out.println("uri : " + uri + "<br>");
	out.println("ip : " + ip + "<br>");
*/	

	String menuGubun = request.getParameter("menuGubun");

	if(menuGubun == null || menuGubun.trim().equals("")) {
		menuGubun = "member_list";

/*		out.println("<script>");
		out.println("location.href='error.jsp?errorCode=001';");
		out.println("</script>");
		return;
*/

	}
	
	String[] imsiMenuGubunArray = menuGubun.split("_");
	String folderName = imsiMenuGubunArray[0];
	String fileName = imsiMenuGubunArray[1];
	String includePage = "../" + folderName + "/" + fileName + ".jsp";
	//System.out.println("--> " + folderName + " / " + fileName + " / " + includePage + "<br>");
	
	
	String imgDisplayPath = "";
	imgDisplayPath += request.getContextPath();
	imgDisplayPath += "/attach";
	imgDisplayPath += request.getContextPath();
		

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");

	int sessionNo = 0;
	String sessionId = "";
	String sessionName = "";
	String sessionGrade = "";
	String sessionEmail = "";
	
	if(session.getAttribute("sessionNo") != null) {
		sessionNo = (Integer) session.getAttribute("sessionNo");
		sessionId = (String) session.getAttribute("sessionId");
		sessionName = (String) session.getAttribute("sessionName");
		sessionGrade = (String) session.getAttribute("sessionGrade");
		sessionEmail = (String) session.getAttribute("sessionEmail");
	}
	

      out.write("\r\n");
      out.write("\r\n");

	String tbl = request.getParameter("tbl");

	SubBoardChkDAO subBoardChkDao = new SubBoardChkDAO();
	SubBoardChkDTO returnTblDto = subBoardChkDao.getSelectOne(tbl);
	
	String imsiBoardTitle = "";
	if(returnTblDto.getBoardChkNo() > 0) {
		imsiBoardTitle = returnTblDto.getTblName();
	} else {
		out.println("<script>");
		out.println("alert('없는 게시판입니다.\\nHome으로 이동합니다.');");
		out.println("location.href='main.jsp?menuGubun=dashBoard_list';");
		out.println("</script>");
		return;
	}

	String pageNum_ = request.getParameter("pageNum");
	if(pageNum_ == null || pageNum_.trim().equals("")) {
		pageNum_ = "1";
	}
	int pageNum = Integer.parseInt(pageNum_);

	String no_ = request.getParameter("no");
	
	if(no_ == null || no_.trim().equals("")) {
		no_ = "0";
	}
	
	int no = Integer.parseInt(no_);

	String searchField = request.getParameter("searchField");
	String searchWord = request.getParameter("searchWord");
	
	// 하나라도 비어있으면 검색X
	int imsiSearchCounter = 0;
	if(searchField == null || searchField.trim().equals("")) {
		searchField = "";
		imsiSearchCounter++;
	}
	if(searchWord == null || searchWord.trim().equals("")) {
		searchWord = "";
		imsiSearchCounter++;
	}
	if(imsiSearchCounter > 0) {
		searchField = "";
		searchWord = "";
	}

      out.write("\r\n");
      out.write("\r\n");

	SubBoardDTO arguDto = new SubBoardDTO();
	arguDto.setTbl(tbl);
	arguDto.setField(searchField);
	arguDto.setWord(searchWord);
	
	SubBoardDAO subBoardDao = new SubBoardDAO();

	// ---------------- 페이징 처리 ----------------
		
	int totalRecord = subBoardDao.getTotalRecord(arguDto);
	int pageSize = 10;	// 한 페이지에 나타낼 레코드 개수
	int blockSize = 5;	// 출력할 블럭의 개수
		
	int block = (pageNum - 1) / pageSize;
	int jj = totalRecord - pageSize * (pageNum - 1);	//단지 화면에 보여질 일련번호..
		
	double totalPageDou = Math.ceil(totalRecord / (double)pageSize);
	int totalPage = (int)totalPageDou;
		
	int startRecord = pageSize * (pageNum - 1) + 1;
	int lastRecord = pageSize * pageNum;
	String urlStr = "main.jsp?menuGubun=subBoard_list&tbl=";
	
	arguDto.setTbl(tbl);
	arguDto.setStartRecord(startRecord);
	arguDto.setLastRecord(lastRecord);
	
	ArrayList<SubBoardDTO> list = subBoardDao.getSelectAll(arguDto);
	String searchFieldStr = "";

      out.write("\r\n");
      out.write("\r\n");
      out.write("<h2>");
      out.print( imsiBoardTitle );
      out.write(" 게시글 목록</h2>\r\n");
      out.write("<div style=\"padding: 10px 0px 10px 0px; width: 80%\">\r\n");
      out.write("	<div style=\"padding: 10px 0px 10px 0px; idth: 30%; float: left;\" align=\"left\">\r\n");
      out.write("	");
	if(imsiSearchCounter > 0) { 
      out.write("\r\n");
      out.write("			* 전체목록 (");
      out.print( totalRecord );
      out.write("건)\r\n");
      out.write("	");
	} else {
			if(searchField.equals("writer")) {
				searchFieldStr = "작성자";
			} else if(searchField.equals("subject")) {
				searchFieldStr = "제목";
			} else if(searchField.equals("content")) {
				searchFieldStr = "내용";
			} else if(searchField.equals("writer_subject_content")) {
				searchFieldStr = "작성자+제목+내용";
			}
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("			* ");
      out.print( searchFieldStr );
      out.write("에서 \"<b>");
      out.print( searchWord );
      out.write("</b>\"으/로 검색된 목록 (");
      out.print( totalRecord );
      out.write("건)\r\n");
      out.write("	");
	} 
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div style=\"padding: 10px 0px 10px 0px; width: 50%; float: right;\" align=\"right\">\r\n");
      out.write("		<form name=\"searchForm\">\r\n");
      out.write("			<input type=\"hidden\" name=\"tbl\" value=\"");
      out.print( tbl );
      out.write("\">\r\n");
      out.write("			<select name=\"searchField\">\r\n");
      out.write("				<option value=\"\">-- 선택 --</option>\r\n");
      out.write("				<option value=\"writer\" ");
 if(searchField.equals("writer")) { out.println("selected"); } 
      out.write(">작성자</option>\r\n");
      out.write("				<option value=\"subject\" ");
 if(searchField.equals("subject")) { out.println("selected"); } 
      out.write(">제목</option>\r\n");
      out.write("				<option value=\"content\" ");
 if(searchField.equals("content")) { out.println("selected"); } 
      out.write(">내용</option>\r\n");
      out.write("				<option value=\"writer_subject_content\" ");
 if(searchField.equals("writer_subject_content")) { out.println("selected"); } 
      out.write(">작성자+제목+내용</option>\r\n");
      out.write("			</select>&nbsp;\r\n");
      out.write("			<input type=\"text\" name=\"searchWord\" value=\"");
      out.print( searchWord );
      out.write("\">&nbsp;\r\n");
      out.write("			<button type=\"button\" onclick=\"search();\">검색</button>\r\n");
      out.write("		</form>\r\n");
      out.write("		<script>\r\n");
      out.write("			function search() {\r\n");
      out.write("				searchForm.action = \"mainProc.jsp?menuGubun=subBoard_listSearch\";\r\n");
      out.write("				searchForm.method = \"post\";\r\n");
      out.write("				searchForm.submit();\r\n");
      out.write("			}\r\n");
      out.write("		</script>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("<table border=\"1\" width=\"80%\">\r\n");
      out.write("	<tr>\r\n");
      out.write("		<th>순번</th>\r\n");
      out.write("		<th>제목</th>\r\n");
      out.write("		<th>작성자</th>\r\n");
      out.write("		<th>작성일</th>\r\n");
      out.write("		<th>조회수</th>\r\n");
      out.write("		<th>ip</th>\r\n");
      out.write("		<th>공지글</th>\r\n");
      out.write("		<th>비밀글</th>\r\n");
      out.write("	</tr>\r\n");

	if(list.isEmpty()) {

      out.write("\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td colspan=\"8\" height=\"200px\" align=\"center\">\r\n");
      out.write("			등록된 게시물이 없습니다..\r\n");
      out.write("		</td>\r\n");
      out.write("	</tr>\r\n");

	}

	for(SubBoardDTO dto : list) {

      out.write("\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td>");
      out.print( jj );
      out.write("</td>\r\n");
      out.write("	");

		String blankValue = "";
		for(int k=2; k<=dto.getStepNo(); k++) {
			blankValue += "&nbsp;&nbsp;&nbsp;&nbsp;[Re] ";
		}
		String imsiSubject = dto.getSubject();
		if(imsiSubject.length() > 10) {
			imsiSubject = imsiSubject.substring(0, 10) + "...";
		}
		if(dto.getNoticeNo() >= 1) {
			blankValue += "<b>[공지]</b> ";
		}
		if(dto.getSecretGubun().trim().equals("T")) {
			blankValue += "<img src='../img/secret_page.png' width='18px' align='center'>";
		}
	
      out.write("\r\n");
      out.write("		<td>");
      out.print( blankValue );
      out.write("<a href=\"#\" onclick=\"move('subBoard_view', '");
      out.print( dto.getTbl() );
      out.write("', '");
      out.print( dto.getNo() );
      out.write("');\" >");
      out.print( imsiSubject );
      out.write("</a></td>\r\n");
      out.write("		<td>");
      out.print( dto.getWriter() );
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print( dto.getRegiDate() );
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print( dto.getHit() );
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print( dto.getIp() );
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print( dto.getNoticeNo() );
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print( dto.getSecretGubun() );
      out.write("</td>\r\n");
      out.write("	</tr>	\r\n");

	jj--;
	}

      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<div style=\"padding-top: 20px; width: 60%;\" align=\"center\">\r\n");
      out.write("	");
      out.print( Pagenation.pagingStr(totalRecord, pageSize, blockSize, pageNum, urlStr, searchField, searchWord) );
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div style=\"padding-top: 20px; width: 80%;\" align=\"right\">\r\n");
      out.write("	|\r\n");
      out.write("	<a href=\"#\" onclick=\"move('subBoard_list', '");
      out.print( tbl );
      out.write("', '');\">목록</a>\r\n");
      out.write("	|\r\n");
      out.write("	<a href=\"#\" onclick=\"move('subBoard_insert', '");
      out.print( tbl );
      out.write("', '');\">등록</a>\r\n");
      out.write("	|\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function move(value1, value2, value3) {\r\n");
      out.write("	location.href='main.jsp?menuGubun=' + value1 + '&tbl=' + value2 + '&no=' + value3 + '&searchField=");
      out.print( searchField );
      out.write("&searchWord=");
      out.print( searchWord );
      out.write("';\r\n");
      out.write("}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
