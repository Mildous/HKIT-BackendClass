/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2022-09-13 03:11:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.subBoard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import subBoard.model.dto.SubBoardCommentDTO;
import java.util.ArrayList;
import subBoard.model.dao.SubBoardDAO;
import java.net.Inet4Address;

public final class commentList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/subBoard/../_include/inc_sessionChk.jsp", Long.valueOf(1661482669264L));
    _jspx_dependants.put("/subBoard/../_include/inc_header.jsp", Long.valueOf(1662616070258L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("subBoard.model.dao.SubBoardDAO");
    _jspx_imports_classes.add("subBoard.model.dto.SubBoardCommentDTO");
    _jspx_imports_classes.add("java.net.Inet4Address");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");

	String referer = request.getHeader("REFERER");
	String url = request.getRequestURL().toString();
	String uri = request.getRequestURI().toString();
	String path = request.getContextPath();
	String ip = Inet4Address.getLocalHost().getHostAddress();	// import java.net.Inet4Address;
/*	
	out.println("referer : " + referer + "<br>");
	out.println("url : " + url + "<br>");
	out.println("uri : " + uri + "<br>");
	out.println("ip : " + ip + "<br>");
*/	

	String menuGubun = request.getParameter("menuGubun");

	if(menuGubun == null || menuGubun.trim().equals("")) {
		menuGubun = "member_list";

/*		out.println("<script>");
		out.println("location.href='error.jsp?errorCode=001';");
		out.println("</script>");
		return;
*/

	}
	
	String[] imsiMenuGubunArray = menuGubun.split("_");
	String folderName = imsiMenuGubunArray[0];
	String fileName = imsiMenuGubunArray[1];
	String includePage = "../" + folderName + "/" + fileName + ".jsp";
	//System.out.println("--> " + folderName + " / " + fileName + " / " + includePage + "<br>");
	
	
	String imgDisplayPath = "";
	imgDisplayPath += request.getContextPath();
	imgDisplayPath += "/attach";
	imgDisplayPath += request.getContextPath();
		

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");

	int sessionNo = 0;
	String sessionId = "";
	String sessionName = "";
	String sessionGrade = "";
	String sessionEmail = "";
	
	if(session.getAttribute("sessionNo") != null) {
		sessionNo = (Integer) session.getAttribute("sessionNo");
		sessionId = (String) session.getAttribute("sessionId");
		sessionName = (String) session.getAttribute("sessionName");
		sessionGrade = (String) session.getAttribute("sessionGrade");
		sessionEmail = (String) session.getAttribute("sessionEmail");
	}
	

      out.write("\r\n");
      out.write("\r\n");

	String no_ = request.getParameter("no");
	int no = Integer.parseInt(no_);
	
	SubBoardDAO subBoardDao = new SubBoardDAO();
	ArrayList<SubBoardCommentDTO> list = subBoardDao.getCommentSelectAll(no);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<table border=\"1\" align=\"center\" style=\"width: 100%; margin-bottom: 10px;\">\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td style=\"padding: 0 0 20px 0;\" >\r\n");
      out.write("			proGubun : <span id=\"procGubun\" style=\"display: ;\">insertProc</span><br>\r\n");
      out.write("			no : <span id=\"no\" style=\"display: ;\">");
      out.print(no );
      out.write("</span><br>\r\n");
      out.write("			commentNo : <span id=\"commentNo\" style=\"display: ;\"></span><br>\r\n");
      out.write("			이름 : <input type=\"text\" name=\"commentWriter\" id=\"commentWriter\" size=\"10\" value=\"\">\r\n");
      out.write("			비밀번호 : <input type=\"password\" name=\"commentPasswd\" id=\"commentPasswd\" size=\"10\" value=\"\"><br>\r\n");
      out.write("			댓글 : <input type=\"text\" name=\"commentContent\" id=\"commentContent\" value=\"\" size=\"40\">\r\n");
      out.write("			<button type=\"button\" id=\"btnCommentSave\">등록하기</button>\r\n");
      out.write("			<button type=\"button\" id=\"btnCommentReset\">초기화</button>\r\n");
      out.write("		</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<table border=\"0\" align=\"center\" style=\"width: 100%; padding: 10px 0px;\">\r\n");
	for(SubBoardCommentDTO dto : list) { 
      out.write("\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td style=\"padding: 10px 0 10px 0;\">\r\n");
      out.write("			<table border=\"0\" align=\"center\" width=\"100%\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>");
      out.print( dto.getWriter() );
      out.write('(');
      out.print( dto.getCommentNo() );
      out.write(") &nbsp; ");
      out.print( dto.getRegiDate() );
      out.write("</td>\r\n");
      out.write("					<td align=\"right\">\r\n");
      out.write("						<a href=\"#comment\" onclick=\"suntaek('updateProc', '");
      out.print( dto.getCommentNo() );
      out.write("', '");
      out.print( dto.getWriter() );
      out.write("', '");
      out.print( dto.getContent() );
      out.write("', '수정하기')\">수정</a> / \r\n");
      out.write("						<a href=\"#comment\" onclick=\"suntaek('deleteProc', '");
      out.print( dto.getCommentNo() );
      out.write("', '");
      out.print( dto.getWriter() );
      out.write("', '");
      out.print( dto.getContent() );
      out.write("', '삭제하기')\">삭제</a>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\">");
      out.print( dto.getContent().replaceAll("\n\r", "<br>") );
      out.write("</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("			<hr>\r\n");
      out.write("		</td>\r\n");
      out.write("	</tr>\r\n");
	} 
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<input type=\"hidden\" id=\"result\">\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("	$(\"#btnCommentSave\").click(function(){\r\n");
      out.write("		commentSave();\r\n");
      out.write("	});\r\n");
      out.write("	$(\"#btnCommentReset\").click(function(){\r\n");
      out.write("		commentReset();\r\n");
      out.write("	});\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function commentSave() {\r\n");
      out.write("  	var param = {\r\n");
      out.write("  		\"procGubun\" : $(\"#procGubun\").text(),\r\n");
      out.write("		\"no\" : $(\"#no\").text(),\r\n");
      out.write("		\"commentNo\" : $(\"#commentNo\").text(),\r\n");
      out.write("		\"writer\" : $(\"#commentWriter\").val(),\r\n");
      out.write("		\"passwd\" : $(\"#commentPasswd\").val(),\r\n");
      out.write("		\"content\" : $(\"#commentContent\").val()\r\n");
      out.write("	}\r\n");
      out.write("	var url = \"../subBoard/commentInsertProc.jsp\";\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		type: \"post\",\r\n");
      out.write("		data: param,\r\n");
      out.write("		url: url,\r\n");
      out.write("		success: function(data) {\r\n");
      out.write("			$(\"#result\").val(data);\r\n");
      out.write("			if($(\"#result\").val() == 1) {\r\n");
      out.write("				alert(\"성공\");\r\n");
      out.write("			} else {\r\n");
      out.write("				alert(\"실패\");\r\n");
      out.write("			}\r\n");
      out.write("			commentList();\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function suntaek(value1, value2, value3, value4, value5) {\r\n");
      out.write("	$(\"#procGubun\").text(value1);\r\n");
      out.write("	$(\"#commentNo\").text(value2);\r\n");
      out.write("	$(\"#commentWriter\").val(value3);\r\n");
      out.write("	$(\"#commentContent\").val(value4);\r\n");
      out.write("	$(\"#btnCommentSave\").text(value5);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function commentReset() {\r\n");
      out.write("	$(\"#procGubun\").text('insert');\r\n");
      out.write("	$(\"#commentNo\").text('');\r\n");
      out.write("	$(\"#commentWriter\").val('');\r\n");
      out.write("	$(\"#commentContent\").val('');\r\n");
      out.write("	$(\"#btnCommentSave\").text('등록하기');\r\n");
      out.write("}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
