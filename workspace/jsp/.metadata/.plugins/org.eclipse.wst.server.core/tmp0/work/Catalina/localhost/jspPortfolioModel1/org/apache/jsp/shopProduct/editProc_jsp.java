/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2022-09-01 05:11:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.shopProduct;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.UUID;
import java.io.File;
import java.util.Enumeration;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import java.util.ArrayList;
import config.Util;
import product.model.dao.ProductDAO;
import product.model.dto.ProductDTO;
import java.net.Inet4Address;

public final class editProc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/shopProduct/_inc_top.jsp", Long.valueOf(1661994311701L));
    _jspx_dependants.put("/shopProduct/../_include/inc_sessionChk.jsp", Long.valueOf(1661482669264L));
    _jspx_dependants.put("/shopProduct/../_include/inc_header.jsp", Long.valueOf(1661305685415L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("config.Util");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("product.model.dao.ProductDAO");
    _jspx_imports_classes.add("java.util.UUID");
    _jspx_imports_classes.add("product.model.dto.ProductDTO");
    _jspx_imports_classes.add("java.net.Inet4Address");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");

	String referer = request.getHeader("REFERER");
	String url = request.getRequestURL().toString();
	String uri = request.getRequestURI().toString();
	String path = request.getContextPath();
	String ip = Inet4Address.getLocalHost().getHostAddress();	// import java.net.Inet4Address;
/*	
	out.println("referer : " + referer + "<br>");
	out.println("url : " + url + "<br>");
	out.println("uri : " + uri + "<br>");
	out.println("ip : " + ip + "<br>");
*/	

	String menuGubun = request.getParameter("menuGubun");

	if(menuGubun == null || menuGubun.trim().equals("")) {
		menuGubun = "member_list";

/*		out.println("<script>");
		out.println("location.href='error.jsp?errorCode=001';");
		out.println("</script>");
*/
		return;
	}
	
	String[] imsiMenuGubunArray = menuGubun.split("_");
	String folderName = imsiMenuGubunArray[0];
	String fileName = imsiMenuGubunArray[1];
	String includePage = "../" + folderName + "/" + fileName + ".jsp";
		

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");

	int sessionNo = 0;
	String sessionId = "";
	String sessionName = "";
	String sessionGrade = "";
	String sessionEmail = "";
	
	if(session.getAttribute("sessionNo") != null) {
		sessionNo = (Integer) session.getAttribute("sessionNo");
		sessionId = (String) session.getAttribute("sessionId");
		sessionName = (String) session.getAttribute("sessionName");
		sessionGrade = (String) session.getAttribute("sessionGrade");
		sessionEmail = (String) session.getAttribute("sessionEmail");
	}
	

      out.write("\r\n");
      out.write("\r\n");

	ProductDAO dao = null;
	ProductDTO dto = null;
	int ProductCode = 0;
	if( fileName.equals("regi") || fileName.equals("regiProc") || fileName.equals("view") || fileName.equals("edit") || fileName.equals("editProc") || fileName.equals("drop") || fileName.equals("dropProc")) {
		String productCode_ = request.getParameter("productCode");
		if(productCode_ == null || productCode_.trim().equals("")) {
			productCode_ = "0";
		}
		ProductCode = Integer.parseInt(productCode_);
		
		ProductDTO arguDto = new ProductDTO();
		arguDto.setProductCode(ProductCode);
			
		dao = new ProductDAO();	
		dto = dao.getSelectOne(arguDto);
	}
	
	String attachPath = "C:/Users/HKIT/COY/attach";
	String uploadPath = attachPath + request.getContextPath() + "/product";	// "/jspPortfolioModel1/product";
	int maxUpload = 1024 * 1024 * 100;	// 업로드 할 수 있는 최대 용량: 100mb
	String encoding = "UTF-8";

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");

//MultipartRequest 인스턴스 생성 - WEB-INF/lib에 cos.jar 추가
	MultipartRequest multi = new MultipartRequest(
		request,
		uploadPath,	// 파일저장경로
		maxUpload,	// 용량
		encoding,	// 인코딩타입
		new DefaultFileRenamePolicy()	// 중복파일처리(동일파일명 업로드 시 뒤에 숫자가 붙음)
	);
	
	
	
	Util util = new Util();
	int failCount = 0;
	
	String productPrice_ = multi.getParameter("productPrice");
	productPrice_ = util.getNullBlankCheck(productPrice_, "");
	productPrice_ = util.getCheckString(productPrice_);
	if(productPrice_.length() <= 0) { failCount++; }
	
	if(failCount > 0) {
		out.println("<script>");
		out.println("alert('입력값이 정확하지 않습니다.');");
		out.println("location.href = 'main.jsp?menuGubun=shopProduct_list';");
		out.println("</script>");
		return;
	}
	
	int productPrice = Integer.parseInt(productPrice_);
	String orgAttach = multi.getParameter("orgAttach");
	String attachInfo = "";
	
	try {
		Enumeration<String> files = multi.getFileNames();	// 전송한 전체 파일이름을 가져옴
		while(files.hasMoreElements()) {
			String tagName = "";
			String fileOriginName = "";
			String fileSavedName = "";
			String fileType = "";
			String fileSize = "";
			String fileExtName = "";	// .png .jpg .jpeg, .gif
			String newFileName = "";
			
			// form 태그에서 <input type="file" name="지정한 이름" /> 을 가져옴
			tagName = (String)files.nextElement();
			// input file name에 해당하는 실제 파일을 가져옴
			File fileObj = multi.getFile(tagName);
			
			String imsiResult = "";
			if(fileObj != null){	// 해당 tagName에 파일을 첨부했으면
				fileOriginName = multi.getOriginalFileName(tagName);
				fileSavedName = multi.getFilesystemName(tagName); 
	            fileType = multi.getContentType(tagName);
	            fileSize = String.valueOf(fileObj.length());
	            fileExtName = fileSavedName.substring(fileSavedName.lastIndexOf(".")+1);
	            
	            // 이미지 파일이 아닌 경우
	            int errorImgCounter = 0;
	            if(fileExtName.toLowerCase().equals("png")) {
	            	
	            } else if(fileExtName.toLowerCase().equals("jpg")) {
	            	
	            } else if(fileExtName.toLowerCase().equals("jpeg")) {
	            	
	            } else if(fileExtName.toLowerCase().equals("gif")) {
	            	
	            } else {
	            	errorImgCounter++;
	            }
	            
	            // 파일 삭제
	            if(errorImgCounter > 0) {
	            	String deleteFilePath = uploadPath + "/" + fileSavedName;
	            	java.io.File f = new java.io.File(deleteFilePath);
	    			f.delete();
	    			
	    			// 변수값 초기화
	    			fileOriginName = "";
	    			fileSavedName = "";
	    			fileType = "";
	    			fileSize = "";
	            }
	            
	            
	            imsiResult="비정상적인 파일..";
	            if(fileExtName.toLowerCase().equals("jpg") || fileExtName.toLowerCase().equals("png") || fileExtName.toLowerCase().equals("jpeg") || fileExtName.toLowerCase().equals("gif")) {
	               imsiResult="정상적인 파일";
	            }else{
	               fileObj.delete();
	            }
	            
				newFileName = UUID.randomUUID().toString() + "." + fileExtName;// 새로 생성할 파일 이름
				String oldFilePath = uploadPath + "/" + fileSavedName;	// 기존에 저장된 파일
				String newFilePath = uploadPath+ "/" + newFileName;	//기존에 저장된 파일을 여기이름으로 바꿈
				File f1 = new File(oldFilePath);
		           if(f1.exists()){
		              File newFile = new File(newFilePath);
		              f1.renameTo(newFile);
		              fileSavedName=newFileName;
		           }

				
		           if(!attachInfo.trim().equals("")){
		               attachInfo+=",";
		            }
		            attachInfo += fileOriginName + "|";
		            attachInfo += fileSavedName + "|";
		            attachInfo += fileType + "|";
		            attachInfo += fileSize;
		        }
				out.print(attachInfo+"<br>");
		}
		
	} catch(Exception e) {
		e.printStackTrace();
	}
	
	if(attachInfo == null || attachInfo.equals("")) {
		attachInfo = "-";
	}
	
	
	ProductDTO arguDto = new ProductDTO();
	arguDto.setProductPrice(productPrice);
	arguDto.setProductCode(dto.getProductCode());
	arguDto.setAttachInfo(attachInfo);
	
	int result = dao.setUpdate(arguDto);
	
	if(result > 0) {
		out.println("<script>location.href='main.jsp?menuGubun=shopProduct_list';</script>");
	} else {
		out.println("<script>");
		out.println("alert('수정 중 오류가 발생했습니다.');");
		out.println("location.href='main.jsp?menuGubun=shopProduct_edit&productCode=" + dto.getProductCode());
		out.println("</script>");
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
